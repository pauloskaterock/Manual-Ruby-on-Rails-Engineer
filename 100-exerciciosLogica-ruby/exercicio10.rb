# Fa√ßa um programa que leia o raio de um c√≠rculo e calcule sua √°rea.


# Fa√ßa um programa que leia o raio de um c√≠rculo e calcule sua √°rea.


# Definimos um m√©todo para calcular a √°rea de um c√≠rculo com base no raio
def calcular_area_circulo
    # Solicita ao usu√°rio que insira o raio do c√≠rculo
    puts "Digite o raio do c√≠rculo:"
    raio = gets.chomp.to_f  # L√™ a entrada do usu√°rio e converte para float
  
    # Define a constante PI
    pi = Math::PI
  
    # Calcula a √°rea do c√≠rculo usando a f√≥rmula A = œÄr¬≤
    area = pi * (raio ** 2)
  
    # Exibe a √°rea do c√≠rculo
    puts "A √°rea do c√≠rculo com raio #{raio} √©: #{format("%.2f", area)}"
  end
  
  # Chamamos o m√©todo para executar o programa
  calcular_area_circulo



#   Explica√ß√£o do c√≥digo:
#     Defini√ß√£o do m√©todo:
    
#     Definimos um m√©todo chamado calcular_area_circulo que n√£o recebe argumentos.
#     Leitura de entrada do usu√°rio:
    
#     Solicitamos ao usu√°rio que insira o raio do c√≠rculo com a mensagem puts "Digite o raio do c√≠rculo:".
#     Usamos gets.chomp.to_f para ler a entrada do usu√°rio, remover qualquer nova linha (chomp) e converter a entrada para um n√∫mero de ponto flutuante (to_f).
#     Defini√ß√£o de PI:
    
#     Definimos a constante pi usando Math::PI, que fornece o valor de œÄ (pi).
#     C√°lculo da √°rea:
    
#     Calculamos a √°rea do c√≠rculo usando a f√≥rmula matem√°tica 
#     ùê¥
#     =
#     ùúã
#     ùëü
#     2
#     A=œÄr 
#     2
#      , onde r √© o raio do c√≠rculo.
#     area = pi * (raio ** 2) realiza o c√°lculo da √°rea.
#     Exibi√ß√£o do resultado:
    
#     Exibimos a √°rea do c√≠rculo formatada com duas casas decimais usando puts "A √°rea do c√≠rculo com raio #{raio} √©: #{format("%.2f", area)}".
#     Execu√ß√£o do m√©todo:
    
#     Chamamos o m√©todo calcular_area_circulo para executar o programa.  