expect(objeto).to matcher: Este √© o m√©todo mais comum usado para asser√ß√µes no RSpec. Ele espera que um objeto (ou express√£o) atenda a um determinado crit√©rio definido pelo "matcher". Alguns exemplos de matchers incluem eq, be, include, match, etc.Exemplo:

expect(5).to eq(5) # Verifica se 5 √© igual a 5
expect(objeto).to_not matcher: Semelhante ao expect(objeto).to, mas espera que a condi√ß√£o seja falsa.Exemplo:

expect(5).to_not eq(3) # Verifica se 5 n√£o √© igual a 3
expect(objeto).to be_truthy / be_falsey / be_nil: Estes s√£o matchers para verificar se um objeto √© verdadeiro, falso ou nulo, respectivamente.Exemplo:

expect(5 > 3).to be_truthy # Verifica se 5 √© maior que 3, ou seja, verdadeiro
expect(objeto).to respond_to(m√©todo): Verifica se um objeto responde a um determinado m√©todo.Exemplo:

expect("hello").to respond_to(:length) # Verifica se o objeto "hello" responde ao m√©todo "length"
expect(objeto).to change(atributo, :m√©todo): Verifica se uma opera√ß√£o causa uma mudan√ßa em um atributo espec√≠fico.Exemplo:

expect { array << 1 }.to change(array, :length).by(1) # Verifica se a adi√ß√£o de um elemento ao array aumenta seu comprimento em 1

#############################################################################################################



# Claro! Vamos falar sobre RSpec e os m√©todos de compara√ß√£o.

# RSpec: Uma Introdu√ß√£o
# O RSpec √© uma biblioteca popular para escrever testes em Ruby. Ele oferece uma sintaxe expressiva e flex√≠vel para especificar o comportamento esperado de seu c√≥digo. Vamos comparar como escrever testes com RSpec em rela√ß√£o ao Minitest.

# Descri√ß√£o de Testes:

# No RSpec, voc√™ descreve o comportamento esperado do c√≥digo usando blocos describe e it.
# Por exemplo, para testar um m√©todo de adi√ß√£o em uma calculadora:


require 'rspec/autorun'

RSpec.describe Calc do
  describe '.add' do
    context 'com valores num√©ricos' do
      it 'retorna a soma dos valores' do
        expect(Calc.add(1, 1)).to eq(2)
        expect(Calc.add(1.5, 1)).to eq(2.5)
      end
    end

    context 'com valores em formato de string' do
      it 'retorna a soma dos valores' do
        expect(Calc.add(1, '1')).to eq(2)
        expect(Calc.add('1.5', 1)).to eq(2.5)
        expect { Calc.add('a', 1) }.to raise_error(TypeError)
      end
    end
  end
end



Matchers:
# Os matchers s√£o m√©todos usados para fazer asser√ß√µes nos testes.
# Por exemplo, expect(Calc.add(1, 1)).to eq(2) verifica se a soma √© igual a 2.
# Execu√ß√£o dos Testes:
# Execute os testes com o comando rspec nome_do_arquivo_spec.rb.

####################################################################################

# LINHAS DE COMANDO PARA EXECU√á√ÉO NO RSPEC

# Claro! Vamos falar sobre os **comandos de linha de execu√ß√£o no RSpec**. üöÄ

# O **RSpec** oferece v√°rias op√ß√µes de linha de comando para personalizar seu comportamento durante a execu√ß√£o dos testes. Aqui est√£o alguns dos comandos mais √∫teis:

# 1. **Executar todos os testes**:
#    - Simplesmente execute `rspec` no terminal para rodar todos os testes no diret√≥rio atual.

# 2. **Executar um arquivo de teste espec√≠fico**:
#    - Se voc√™ deseja executar apenas um arquivo de teste espec√≠fico, use o seguinte comando:
#      ```
#      rspec path/to/seu_arquivo_spec.rb
#      ```

# 3. **Op√ß√µes de linha de comando**:
#    - Para ver todas as op√ß√µes dispon√≠veis, execute o seguinte comando:
#      ```
#      rspec --help
#      ```

# 4. **Executar com o Ruby**:
#    - Geralmente, √© mais simples usar o comando `rspec`. No entanto, se voc√™ precisar usar o comando `ruby`, dever√° requerer o `rspec/autorun`.
#    - Voc√™ pode passar a op√ß√£o `-rrspec/autorun` ao invocar o Ruby ou adicionar `require 'rspec/autorun'` a um ou mais de seus arquivos de teste.
#    - √â convencional colocar configura√ß√µes e arquivos de suporte em `spec/spec_helper.rb` e requerer esse arquivo nos arquivos de teste usando `require 'spec_helper'`.

# 5. **Executar comandos espec√≠ficos**:
#    - Al√©m disso, voc√™ pode usar outras op√ß√µes, como `--example`, `--format`, `--tag`, `--fail-fast`, `--dry-run`, e muito mais.

# Lembre-se de que o **RSpec** √© uma ferramenta poderosa para testar seu c√≥digo Ruby, e esses comandos ajudam a personalizar sua experi√™ncia de teste. üß™

# (1) Command line options - rspec.info. https://rspec.info/features/3-12/rspec-core/command-line/.

# (2) Uma Introdu√ß√£o ao RSpec: Testando em Ruby com Eleg√¢ncia. https://www.dio.me/articles/uma-introducao-ao-rspec-testando-em-ruby-com-elegancia.

# (3) RSpec - Guia R√°pido - umdados.com. https://umdados.com/tutorial/rspec/rspec-quick-guide/rspec-guia-rapido.

# (4) 25 comandos b√°sicos do CMD (Terminal do Windows). https://dtnetwork.com.br/comandos-basicos-do-cmd/.

# (5) Command Line - RSpec Help. https://rspec.help/rspec/command-line/.


# No RSpec, voc√™ pode executar seus testes de v√°rias maneiras usando comandos de linha. Aqui est√£o os principais comandos de linha de execu√ß√£o no RSpec:

# Executar todos os testes no diret√≥rio atual:

# rspec
# Executar testes em um arquivo espec√≠fico:
# bash

# rspec path/to/spec_file.rb
# Executar testes em um diret√≥rio espec√≠fico:
# bash

# rspec path/to/spec_directory
# Executar testes com uma linha espec√≠fica correspondente:
# bash

# rspec path/to/spec_file.rb:linenumber
# Executar testes com uma tag espec√≠fica:
# css

# rspec --tag tag_name
# Executar testes com v√°rias tags espec√≠ficas:
# css

# rspec --tag tag1 --tag tag2
# Executar testes com uma descri√ß√£o espec√≠fica:
# arduino

# rspec -e "description"
# Executar testes e gerar um relat√≥rio de documenta√ß√£o:
# css

# rspec --format documentation
# Executar testes e gerar um relat√≥rio de progresso:
# scss

# rspec --format progress
# Executar testes com a op√ß√£o de falhar rapidamente (exit no primeiro erro):
# css

# rspec --fail-fast
# Executar testes com a op√ß√£o de mostrar backtraces completos:
# css

# rspec --backtrace